{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","className","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAwB9C,OAGI,uBAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAEMJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,MAQlB,UAEI,uBACIO,KAAK,OACLC,UAAU,eACVC,MAAOV,EACPW,SA1Bc,SAAER,GAExBF,EAAcE,EAAES,OAAOF,UA0BnB,4BAAIV,Q,+BCpCCa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCAXO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAIN,EAAGC,EAAOV,GAGhB,sBAAKP,UAAU,4BAAf,UACE,qBAAKuB,IAAMhB,EAAMiB,IAAMP,IACvB,qBAAKjB,UAAU,YAAf,SACE,oBAAIA,UAAU,aAAd,SAA6BiB,UCH9BQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAE3BsB,KAAM,GACNc,SAAS,IALuB,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBxC,OAhBAC,qBAAW,WAEPzB,EAASC,GACJyB,MAAM,SAAAC,GAEHC,YAAY,WACRX,QAAQC,IAAIS,GACZH,EAAS,CACLhB,KAAMmB,EACNL,SAAQ,MAEd,UAGX,CAACrB,IAEGsB,EDlB2BM,CAAa5B,GAAjCa,EAJuB,EAI7BN,KAAcc,EAJe,EAIfA,QAUtB,OACI,gCACI,6BAAMrB,IACN,uBACA,uBACA,sBAAKL,UAAU,mCAAf,UAEQ0B,GAAW,2CAIXR,EAAOJ,KAAK,SAAAC,GAAG,OAEP,cAAC,EAAD,eAESA,GADCA,EAAIC,cE9B7BkB,EAAe,WAAM,MAIK5C,mBAAS,CAAC,KAJf,mBAIvB6C,EAJuB,KAIZ9C,EAJY,KAc9B,OACA,mCACI,sBAAKW,UAAU,YAAf,UACA,8CACI,cAAC,EAAD,CAAcX,cAAgBA,IAClC,uBACA,6BAEQ8C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADLA,c,MClB/B+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.00e1e451.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    //obtenemos nuevo valor\r\n    const handleInputChange = ( e ) => { \r\n        //setInputValue([...setInputValue,'Hola']);\r\n        setInputValue(e.target.value);\r\n        \r\n    }\r\n\r\n    //Actualizamos el nuevo valor agregandolo al componenente\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        //console.log('Submit Hecho');   \r\n            if( inputValue.trim().length > 2) {\r\n                setCategories(cats => [inputValue, ...cats]);   \r\n            setInputValue(''); \r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n\r\n        <form onSubmit={ handleSubmit }>\r\n\r\n            <input \r\n                type=\"text\" \r\n                className=\"form-control\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n            <p>{inputValue}</p>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n    //peticion HTTP\r\n    export const getGifs = async( category ) => {\r\n    \r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=F6h4h1z7RV8grNFymHw9PHUVmDKD8G8R&limit=10`;\r\n       \r\n        const resp = await fetch( url );\r\n        \r\n        const { data } = await resp.json();\r\n\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        \r\n        return gifs;\r\n\r\n    }\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    \r\n    console.log(id,title, url);\r\n    \r\n    return (\r\n          <div className=\"card mr-2 animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{ title }</h5>\r\n            </div>\r\n          </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n//import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n//componente\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n  /*\r\n    const [images, setImages] = useState([]);\r\n\r\n\r\n  */\r\n\r\n\r\n    //getGifs();\r\n\r\n    return (\r\n        <div>\r\n            <h3>{ category }</h3>\r\n            <hr></hr>\r\n            <br></br>\r\n            <div className=\"row row-cols-1 row-cols-md-2 g-4\">\r\n                { \r\n                    loading && <p>loading...</p>\r\n                }\r\n\r\n                { \r\n                    images.map( img => (\r\n                          \r\n                            <GifGridItem  \r\n                                key={ img.id}\r\n                                { ...img } />\r\n                            ) )\r\n                \r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  \r\n    const [state, setState] = useState({\r\n\r\n            data: [],\r\n            loading: true\r\n    });\r\n\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout( () => {\r\n                    console.log(imgs);\r\n                    setState({\r\n                        data: imgs,\r\n                        loading:false\r\n                    });\r\n                },3000 );\r\n            } )\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    //const categories = ['personaje1','personaje2','personaje3']; \r\n    const [categories,setCategories] = useState(['']);\r\n\r\n/*\r\n\r\n    const handleAdd = () => {\r\n        //setCategories( [...categories, 'hunterXhunter'] );\r\n        setCategories( cats => [ ...cats, 'HunterXHunter' ] );\r\n   \r\n    }\r\n*/\r\n    return (\r\n    <>\r\n        <div className=\"container\"> \r\n        <h2>GifExpertApp</h2>\r\n            <AddCategory  setCategories={ setCategories } />\r\n        <hr/>\r\n        <ol>\r\n            { \r\n                categories.map( category => \r\n                    <GifGrid \r\n                        key= { category }\r\n                        category= { category } />\r\n                    ) \r\n            }\r\n        </ol>\r\n       \r\n        \r\n        </div>\r\n    </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\n//componente\nimport { GifExpertApp } from \"./GifExpertApp\";\n\n//css\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}